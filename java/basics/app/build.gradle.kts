/*
    Gradle build file for the basics/app module.
    This file is a modified version of the default build.gradle.kts
    file generated by the Gradle 'init' task.
 */
plugins {
  // Apply the application plugin to add support for building a CLI application in Java.
  application
}

repositories {
  // Use Maven Central for resolving dependencies.
  mavenCentral()
}

dependencies {
  // Application dependencies
  implementation("org.jetbrains:annotations:24.1.0")

  // The dependency on Guava is automatically added by the 'init' task
  // when it generates the build.gradle.kts file. However, the version
  // of Guava that is picked up with the default configuration is
  // from the gradle's own dependencies, which may not be the latest
  // version. IntelliJ IDEA detects this and suggests updating the
  // version to the latest one.
  // So standard practice is to comment out the default Guava dependency
  // and add the latest version explicitly, as shown below.
  // implementation(libs.guava)
  implementation("com.google.guava:guava:33.2.0-jre")


  // Use JUnit Jupiter for testing.
  // As with the Guava dependency, the default JUnit Jupiter version
  // picked up by the 'init' task may not be the latest one since
  // it is picked up from gradle's own dependencies. To prevent
  // IntelliJ IDEA from complaining about this, the default JUnit
  // Jupiter dependency is commented out and the latest version is
  // added explicitly.
  // testImplementation(libs.junit.jupiter)
  testImplementation("org.junit.jupiter:junit-jupiter-api:5.11.0-M2")
  testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

application {
  // Define the main class for the application.
  mainClass = "sv.basics.Language"
}

tasks.named<Test>("test") {
  // Use JUnit Platform for unit tests.
  useJUnitPlatform()
}
