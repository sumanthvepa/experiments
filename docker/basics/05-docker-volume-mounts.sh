#!/bin/bash
# -*- coding: utf-8 -*-
# -------------------------------------------------------------------
# 05-docker-volume-mounts.sh: Explore docker volume mounts
#
# Copyright (C) 2024-25 Sumanth Vepa.
#
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License a
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see
# <https://www.gnu.org/licenses/>.
# -------------------------------------------------------------------

echo "05-docker-volume-mounts"

# -------------
# Volume Mounts
#--------------

# If you want to persist data generated by a program within
# the container, the best way to do it is to use a volume
# mount.

# First create a docker volume to store your data
docker volume create 'docker-basics-test-volume'

# Now create a container that uses the volume using
# the --mount option. The meaning of the options
# passed to mount are as follows:
# type=volume: Specifies that this is a volume mount
# src=docker-basics-test-volume: This is name of the
#   volume that needs to be mounted.
# dst=/test: This is the directory where the volume needs
#   to be mounted.
# As usual we use --interactive and --tty to open interact
# with bash in the terminal. But this time we specify
# --rm to remove the container when exiting bash.
echo "Now write some test data to the mounted volume"
echo "cd /test/"
echo "echo 'Test data' > ./test.txt"
echo "exit "

# The --rm flag will remove the container when you exit
docker container run \
  --mount 'type=volume,src=docker-basics-test-volume,dst=/test' \
  --interactive \
  --tty \
  --rm \
  almalinux:9-minimal

echo "Notice that the container has been removed."
echo "ps does not show anything"

docker container ps -a

echo "But if we run another container with the same volume"
echo "mounted on to it, the data created by the earlier"
echo "container will be available."
echo "You can test this by doing: "
echo "cat /test/test.txt"
echo "from inside the container"
echo "Notice that the data is still precent."
echo "Then exit the container afer you are done."
docker container run \
  --name='docker-basics-volume' \
  --mount 'type=volume,src=docker-basics-test-volume,dst=/test' \
  --interactive \
  --tty \
  --rm \
  almalinux:9-minimal

echo "Okay. Container has been removed. But the data written"
echo "into /test is preserved beyond the lifetime of the container."
  
# On linux the volumes are stored on the host VM at
# /var/lib/docker/volumes/
# DO NOT TRY TO BACKUP these volumes or access them in 
# ANY way outside of docker.

# To properly backup the data in a volume, mount the
# volume into a running container and tar-zip the 
# mounted directory, then scp that data off the container.
# DO NOT simply copy the contents of /var/lib/docker/volumes.

# You can list all volumes using the docker volume ls
# command
docker volume ls

# You can remove a volume using docker volume rm.
# Note that you cannot remove a volume that is in
# use by container.

docker volume rm 'docker-basics-test-volume'
