#!/bin/bash
# -*- coding: utf-8 -*-
# -------------------------------------------------------------------
# 17-docker-save-load.sh: Explore the docker save and load commands
#
# Copyright (C) 2024-25 Sumanth Vepa.
#
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License a
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see
# <https://www.gnu.org/licenses/>.
# -------------------------------------------------------------------

echo '16-docker-save-load'

# For this exploration we need an image to work with. We will create
# a postgres-test image from Dockerfile in the postgres-test directory.
# The utility script docker-build-postgres-test-utilities.sh provides
# the necessary commands to build the image.
# We source the script to make the commands available in the current
# shell and then run the commands to build the image.
source docker-build-postgres-test-utilities.sh

if [[ $ARCH_SUFFIX == 'amd64' ]]; then
  IMAGE_NAME='postgres-test:linux-amd64'
  TARBALL_NAME='postgres-test-linux-amd64.tar'
elif [[ $ARCH_SUFFIX == 'arm64' ]]; then
  IMAGE_NAME='postgres-test:linux-arm64'
  TARBALL_NAME='postgres-test-linux-arm64.tar'
else
  echo "Unsupported architecture: $CPU_ARCHITECTURE"
  exit 1
fi

# Clean up any existing tarballs
rm -f $TARBALL_NAME

download_and_build_postgres_test_image $IMAGE_NAME
EXIT_CODE=$?
if [[ $EXIT_CODE -ne 0 ]]; then
  echo "Failed to build the postgres-test image"
  exit $EXIT_CODE
fi

# Now that we have a postgres-test:linux-arm64 or
# postgres-test:linux-amd65 image, we can explore how to save the
# image to a tarball

# Save the image to a tarball
docker save -o $TARBALL_NAME $IMAGE_NAME

# This creates a tarball with the name postgres-test-linux-arm64.tar
# or postgres-test-linux-amd64.tar depending on the architecture.
# This tarball can be moved to another machine and loaded using the
# docker load command. 
ls -l $TARBALL_NAME

# For the purposes of illustration, we will delete the image from the
# local machine and then load it back from the tarball.
docker image rm $IMAGE_NAME

# Check that the image is deleted
docker image ls -a

# Load the image from the tarball
docker load -i $TARBALL_NAME


# Check that the image has been recreated
docker image ls -a

# One thing to note is that will you can load an image from a tarball
# generated by docker save to a machine with a different architecture,
# you will not be able to run the image if the architecture is not
# supported by the machine. For example, if you save an image on an
# arm64 machine and load it on an amd64 machine, the image will load
# successfully but you will not be able to run it.

# This is still a useful thing to do, because, this is how we create
# multi-architecture images. We build the image on each architecture
# and save it to a tarball. Then we load all the tarballs on a machine
# and use docker manifest create to create a manifest list that
# combines all the images into a single multi-architecture image.
# See 18-docker-manifest-create.sh for more details.

# Clean up image
docker image rm $IMAGE_NAME

# Clean up tarball
rm -f $TARBALL_NAME