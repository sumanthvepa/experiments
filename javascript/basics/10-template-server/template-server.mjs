/* -------------------------------------------------------------------
 * 11-template-server.mjs: A  

 *
 * Copyright (C) 2024 Sumanth Vepa.
 *
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see 
 * <https://www.gnu.org/licenses/>.
--------------------------------------------------------------------*/
/**
 *  This is a simple web server that serves static files.
 * It uses the express framework to serve static files from a
 * document root directory. The document root directory is
 * specified on the command line with the -d option. The default
 * document root is ./public located in the same directory as the
 * where the server is run.
 *
 * This is useful for many of the subsequent lessons that need
 * a static web server to serve HTML, CSS, and JavaScript files.
*/

import nunjucks from 'nunjucks';
import express from 'express';
import { Command } from 'commander';

// Note the comments are JSDoc comments.
// See https://jsdoc.app/about-getting-started
/**
 * Process command line arguments.
 * @returns {*[hostname, port]}: The hostname and port number to listen on.
 */
function processCommandLineArguments() {
  const program = new Command();

  program
      .version('4.0.0')
      .description('A configurable express server that returns "Hello, World!"')
      .option('-h, --host, <host', 'Hostname to listen on.', '127.0.0.1')
      .option('-p, --port, <port>', 'Port number to listen on.', '9007')
      .option('-d, --document-root, <documentRoot>', 'Document root for static files.', 'static')
      .option('-t, --template-root, <templateRoot>', 'Template root for dynamic files.', 'templates')
      .parse();

  const options = program.opts();
  return [options.host, options.port, options.documentRoot, options.templateRoot];
}

function computeTemplateFile(url) {
  // Strip leading / from the url
  let strippedUrl = url.replace(/^\//, '');
  let template = strippedUrl + '.njk';
  // If the URL ends with / then it should be treated
  // as a directory and the index.njk file should be served.
  if (/\/$/.test(url)) {
    template =  strippedUrl + 'index.njk';
  }
  return template;
}

/**
 * @function defaultView
 * @description The default view for the web server.
 * This function is invoked for all URLs that match the pattern /^\//.
 * and are not served by the express static middleware.
 * Which is basically all dynamic URLs.
 * The function computes the template file to render based on the URL.
 * It then renders the template file using nunjucks and sends the result
 * back to the client. If the template file does not exist, it sends
 * a 404 response.
 *
 * @param req The request object that was passed to express
 * @param res The response object generated by express and
 *            enhanced by nunjucks.
 */
function defaultView(req, res) {
  console.log(req.originalUrl);
  let template = computeTemplateFile(req.originalUrl);
  console.log(template);
  // Documentation for the render method (which is inserted by nunjucks)
  // into the response object can be found at:
  // https://mozilla.github.io/nunjucks/api.html#render
  res.render(template, (err, rendered_template) => {
    // This callback executed by nunjucks after it has rendered the
    // template. It is this callbacks responsibility to send the
    // appropriate response.
    if (err) {
      console.log(`Encountered an error while rendering ${template}: ${err}`);
      // Send a 404 response.
      res.status(404).send('Not found');
    } else {
      res.send(rendered_template);
    }
  });
}

/**
 * setupRoutes: Set up the routes for the web server.
 * @param app The express application object.
 * @param documentRoot
 * @param templateRoot
 */
function setupRoutes(app, documentRoot, templateRoot) {
  // The sequence of invocation of the get and use methods is important.
  // This sequence ensures that the static files are served from the
  // document root and the dynamic files are rendered from the template
  // root.

  // First get express to look for a static file of the given name.
  // Server static files from document root.

  // In general this is not an efficient way to configure a webserver
  // because it will scan the file system for every request.
  // It would be much better to route specific URLs to specific template
  // files first, and then use the express.static middleware to serve
  // static files if no route matches.
  app.use(express.static(documentRoot));

  // Configure nunjucks to look for templates in the template root.
  // Also specify the express app object so that nunjucks can use it.
  // Nunjucks adds a render method to the response object which can be
  // used to render templates.
  nunjucks.configure(templateRoot, {'autoescape': true, express: app});

  // Serve dynamic files from template root.
  // Here the pattern /^\// matches all URLs.
  // But since static files have already been served by the previous
  // middleware, this will only be invoked for dynamic files which
  // don't exist in the document root.
  app.get(/^\//, defaultView);
}

/**
 * runServer: Start the web server.
 *
 * Serves static files from the document root directory and
 * renders dynamic files from the template root directory.
 * 
 * This function uses the express framework to create a web server.
 *
 * @param hostname The host interface to listen on. Use 0.0.0.0 to 
 *                  listen on all interfaces.
 * @param port The port number to listen on.
 * @param documentRoot The document root for static files.
 * @param templateRoot The template root for dynamic files.
 */
function runServer(hostname, port, documentRoot, templateRoot) {
  // Create the express application object.
  console.log(`Document root: ${documentRoot}`);
  console.log(`Template root: ${templateRoot}`);
  const app = express();
  console.log(typeof(app))

  // Setup the routes for the web server.
  setupRoutes(app, documentRoot, templateRoot);

  // Start listening for connections
  app.listen(port, hostname, () => {
    console.log(`Server running at http://${hostname}:${port}`);
  });
}

const [hostname, port, documentRoot, templateRoot] = processCommandLineArguments();
runServer(hostname, port, documentRoot, templateRoot);
